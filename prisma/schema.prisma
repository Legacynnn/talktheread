// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  createdRooms  Rooms[]   @relation("createdBy")

  username String? @unique

  image        String?
  accounts     Account[]
  sessions     Session[]
  Post         Post[]
  Comments     Comment[]
  CommentVote  CommentVote[]
  Vote         Vote[]
  Subscription Subscription[]

  @@map("users")
}

model Rooms {
  id         String   @id @default(cuid())
  name       String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  posts      Post[]

  creatorId   String?
  Creator     User?          @relation("createdBy", fields: [creatorId], references: [id])
  subscribers Subscription[]

  @@index([name])
  @@map("rooms")
}

model Subscription {
  user    User   @relation(fields: [userId], references: [id])
  userId  String
  room    Rooms  @relation(fields: [roomsId], references: [id])
  roomId  String
  roomsId String

  @@id([userId, roomId])
  @@map("subscriptions")
}

model Post {
  id         String   @id @default(cuid())
  title      String
  content    Json?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  rooms      Rooms    @relation(fields: [roomsId], references: [id])
  roomsId    String

  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  comments Comment[]
  votes    Vote[]

  @@map("posts")
}

model Comment {
  id         String   @id @default(cuid())
  text       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  author     User     @relation(fields: [authorId], references: [id])
  authorId   String
  Post       Post?    @relation(fields: [postId], references: [id])
  postId     String?

  replyToId String?
  replyTo   Comment?  @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Comment[] @relation("ReplyTo")

  votes     CommentVote[]
  commentId String?

  @@map("comments")
}

enum VoteType {
  UP
  DOWN
}

model Vote {
  user   User     @relation(fields: [userId], references: [id])
  userId String
  post   Post     @relation(fields: [postId], references: [id])
  postId String
  type   VoteType

  @@id([userId, postId])
  @@map("votes")
}

model CommentVote {
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  comment   Comment  @relation(fields: [commentId], references: [id])
  commentId String
  type      VoteType

  @@id([userId, commentId])
  @@map("comment_votes")
}
